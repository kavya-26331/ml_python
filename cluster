import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Sample data (replace with your actual dataset)
data = {
    'Feature1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Feature2': [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Extract features
features = df[['Feature1', 'Feature2']]

# Standardize data
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

# Apply K-Means clustering
kmeans = KMeans(n_clusters=2, random_state=42)  # Set the number of clusters
df['Cluster'] = kmeans.fit_predict(scaled_features)

# Display clusters
print("Clustered Data:\n", df)

# Visualize clusters
plt.scatter(df['Feature1'], df['Feature2'], c=df['Cluster'], cmap='viridis')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='red', label='Centroids')
plt.xlabel('Feature1')
plt.ylabel('Feature2')
plt.title('K-Means Clustering')
plt.legend()
plt.show()


# Example prediction (for a new data point)
new_data_point = np.array([[11, 0]]) # Example new data point
scaled_new_data = scaler.transform(new_data_point)
predicted_cluster = kmeans.predict(scaled_new_data)
print(f"Predicted cluster for new data point: {predicted_cluster[0]}")
